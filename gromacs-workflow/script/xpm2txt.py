#!/usr/bin/env python

import sys
import argparse
from pathlib import Path
from typing import Dict, Any, List

"""
Utility tool to convert xpm files generated by GROMACS to a 3-column text file.
"""

usage = """USAGE: xpm2txt.py -f <input xpm file> -o <output txt file> [-s column]"""

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=usage)
    parser.add_argument("-f", type=Path, required=True, help="Input XPM file")
    parser.add_argument("-o", type=Path, required=True, help="Output TXT file")
    parser.add_argument("-s", type=int, default=None, help="Sort by a given column")
    return parser.parse_args()


def parse_xpm(xpm_file: Path) -> tuple[List[str], Any, Any, Dict[str, float]]:
    xpm_data: List[str] = []
    x_axis: List[float] = []
    y_axis: List[float] = []
    letter_to_value: Dict[str, float] = {}

    with open(xpm_file, "r") as xpm_input:
        for line in xpm_input:
            if line.startswith("/* x-axis"):
                x_axis = list(map(float, line.split()[2:-2]))  # 去掉最后值
            if line.startswith("/* y-axis"):
                y_axis = list(map(float, line.split()[2:-2]))
            if line.startswith('"') and x_axis and y_axis:  # 读取数据
                xpm_data.insert(0, line.strip().strip(",")[1:-1])
            if line.startswith('"') and len(line.split()) > 4:
                letter = line.split()[0][1:]
                value = float(line.split()[-2][1:-1])
                letter_to_value[letter] = value

    return (xpm_data, x_axis, y_axis, letter_to_value)


def match_data(
    xpm_data: List[str], x_axis: Any, y_axis: Any, letter_to_value: Dict[str, float]
) -> List[List[float]]:
    txt_values: List[List[float]] = []
    for y_index, data_value in enumerate(xpm_data):
        y_value: float = y_axis[y_index]
        for x_index, x_value in enumerate(x_axis):
            letter = data_value[x_index]
            value = letter_to_value.get(letter, 0.0)  # 防止 KeyError
            txt_values.append([x_value, y_value, value])
    return txt_values


def apply_sorting(column_sort: int, txt_values: List[List[float]]) -> None:
    try:
        txt_values.sort(key=lambda x: x[column_sort - 1])
    except IndexError:
        print(usage)
        print(f"ERROR: Column not found ({column_sort})\n")
        sys.exit()


def print_to_file(txt_values: List[List[float]], output_file: Path) -> None:
    with open(output_file, "w") as output:
        for x, y, z in txt_values:
            output.write(f"{x: 3.5f}\t{y: 3.5f}\t{z: 3.5f}\n")


if __name__ == "__main__":
    args = parse_args()
    parsed_data = parse_xpm(args.f)
    matched_data = match_data(parsed_data[0], parsed_data[1], parsed_data[2], parsed_data[3])
    if args.s:
        apply_sorting(args.s, matched_data)
    print_to_file(matched_data, args.o)
